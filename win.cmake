# x86-64: CMOV, CMPXCHG8B, FPU, FXSR, MMX, FXSR, SCE, SSE, SSE2
# x86-64-v2: (close to Nehalem) CMPXCHG16B, LAHF-SAHF, POPCNT, SSE3, SSE4.1, SSE4.2, SSSE3
# x86-64-v3: (close to Haswell) AVX, AVX2, BMI1, BMI2, F16C, FMA, LZCNT, MOVBE, XSAVE
# x86-64-v4: AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL

set(LLVM_ARCH x86-64-v3 CACHE STRING "")
set(LLVM_ROOT ${CMAKE_CURRENT_LIST_DIR} CACHE PATH "")

# System
if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
  set(CMAKE_CROSSCOMPILING ON CACHE BOOL "")
  set(CMAKE_SYSTEM_NAME Windows CACHE STRING "")
  set(CMAKE_SYSTEM_VERSION 10.0 CACHE STRING "")
  set(CMAKE_SYSTEM_PROCESSOR AMD64 CACHE STRING "")
endif()

# System Root
set(CMAKE_SYSROOT ${LLVM_ROOT}/win CACHE PATH "")
set(CMAKE_FIND_ROOT_PATH ${LLVM_ROOT} CACHE PATH "")
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY CACHE STRING "")
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY CACHE STRING "")
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY CACHE STRING "")
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH CACHE STRING "")
set(CMAKE_FIND_PACKAGE_PREFER_CONFIG ON CACHE BOOL "")

set(CMAKE_SYSTEM_PROGRAM_PATH
  ${LLVM_ROOT}/bin
  ${LLVM_ROOT}/win/bin
  ${LLVM_ROOT}/win/sbin
  ${LLVM_ROOT}/win/sdk/bin
  CACHE PATH "")

set(CMAKE_SYSTEM_INCLUDE_PATH
  ${LLVM_ROOT}/win/include
  ${LLVM_ROOT}/win/crt/include
  ${LLVM_ROOT}/win/sdk/include/shared
  ${LLVM_ROOT}/win/sdk/include/ucrt
  ${LLVM_ROOT}/win/sdk/include/um
  CACHE PATH "")

set(CMAKE_SYSTEM_LIBRARY_PATH
  ${LLVM_ROOT}/win/lib
  ${LLVM_ROOT}/win/crt/lib
  ${LLVM_ROOT}/win/sdk/lib/ucrt
  ${LLVM_ROOT}/win/sdk/lib/um
  CACHE PATH "")

# Modules
list(INSERT CMAKE_MODULE_PATH 0 ${LLVM_ROOT}/cmake)

# Configs
set(CMAKE_PREFIX_PATH ${LLVM_ROOT}/cmake ${LLVM_ROOT}/win/lib/cmake CACHE PATH "")

# C Compiler
find_program(CMAKE_C_COMPILER clang-cl PATHS ${LLVM_ROOT}/bin REQUIRED)
set(CMAKE_C_COMPILER_TARGET x86_64-pc-windows-msvc CACHE STRING "")
set(CMAKE_C_EXTENSIONS OFF CACHE BOOL "")

# C++ Compiler
find_program(CMAKE_CXX_COMPILER clang-cl PATHS ${LLVM_ROOT}/bin REQUIRED)
set(CMAKE_CXX_COMPILER_TARGET x86_64-pc-windows-msvc CACHE STRING "")
set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "")

# ASM Compiler
find_program(CMAKE_ASM_COMPILER clang-cl PATHS ${LLVM_ROOT}/bin REQUIRED)
set(CMAKE_ASM_COMPILER_TARGET x86_64-pc-windows-msvc CACHE STRING "")

# Compiler Flags
if(NOT BUILD_SHARED_LIBS)
  set(LLVM_CRT_FLAGS "/MT")
else()
  set(LLVM_CRT_FLAGS "/MD")
endif()

set(LLVM_IPO_FLAGS "-flto=thin -fwhole-program-vtables")

set(LLVM_CFLAGS "-march=${LLVM_ARCH} -fmerge-all-constants /permissive-")
set(LLVM_CFLAGS "${LLVM_CFLAGS} -Xclang -fdiagnostics-absolute-paths -Xclang -fcolor-diagnostics")
set(LLVM_CFLAGS "${LLVM_CFLAGS} -fms-compatibility-version=19.30 -Wno-language-extension-token")
set(LLVM_CFLAGS "${LLVM_CFLAGS} /DWIN32 /D_WINDOWS /DWINVER=0x0A00 /D_WIN32_WINNT=0x0A00")
set(LLVM_CFLAGS "${LLVM_CFLAGS} /D_CRT_NONSTDC_NO_DEPRECATE /D_CRT_USE_BUILTIN_OFFSETOF")
set(LLVM_CFLAGS "${LLVM_CFLAGS} /D_CRT_SECURE_NO_DEPRECATE /D_CRT_SECURE_NO_WARNINGS")
set(LLVM_CFLAGS "${LLVM_CFLAGS} /D_ATL_SECURE_NO_DEPRECATE /D_SCL_SECURE_NO_WARNINGS")

set(CMAKE_C_FLAGS "${LLVM_CFLAGS}" CACHE STRING "")
set(CMAKE_C_FLAGS_DEBUG "/Od /RTC1 /Zi /MD" CACHE STRING "")
set(CMAKE_C_FLAGS_RELEASE "/O2 /Oi /GS- /analyze- /DNDEBUG ${LLVM_CRT_FLAGS} ${LLVM_IPO_FLAGS}" CACHE STRING "")
set(CMAKE_C_FLAGS_MINSIZEREL "/O1 /Oi /GS- /analyze- /DNDEBUG /MD ${LLVM_IPO_FLAGS}" CACHE STRING "")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "/O1 /Oi /GS- /DNDEBUG /MD ${LLVM_IPO_FLAGS}" CACHE STRING "")
set(CMAKE_C_FLAGS_COVERAGE "/Od /RTC1 /Zi /MD -fprofile-instr-generate -fcoverage-mapping" CACHE STRING "")

if(LLVM_DISABLE_EXCEPTIONS OR LLVM_DISABLE_RTTI)
  set(LLVM_CFLAGS "${LLVM_CFLAGS} /EHs-c- /D_HAS_EXCEPTIONS=0")
else()
  set(LLVM_CFLAGS "${LLVM_CFLAGS} /EHsc")
endif()

if(LLVM_DISABLE_RTTI)
  set(LLVM_CFLAGS "${LLVM_CFLAGS} /GR- /D_HAS_STATIC_RTTI=0")
endif()

set(CMAKE_CXX_FLAGS "${LLVM_CFLAGS}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_DEBUG "/Od /RTC1 /Zi /MD" CACHE STRING "")
set(CMAKE_CXX_FLAGS_RELEASE "/O2 /Oi /GS- /analyze- /DNDEBUG ${LLVM_CRT_FLAGS} ${LLVM_IPO_FLAGS}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_MINSIZEREL "/O1 /Oi /GS- /analyze- /DNDEBUG /MD ${LLVM_IPO_FLAGS}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/O1 /Oi /GS- /DNDEBUG /MD ${LLVM_IPO_FLAGS}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_COVERAGE "/Od /RTC1 /Zi /MD -fprofile-instr-generate -fcoverage-mapping" CACHE STRING "")

unset(LLVM_CFLAGS)
unset(LLVM_IPO_FLAGS)
unset(LLVM_CRT_FLAGS)

set(CMAKE_MSVC_RUNTIME_LIBRARY "" CACHE STRING "")

foreach(LANG C CXX RC)
  set(CMAKE_${LANG}_STANDARD_INCLUDE_DIRECTORIES ${CMAKE_SYSTEM_INCLUDE_PATH} CACHE PATH "")
endforeach()

# Linker
find_program(CMAKE_LINKER lld-link PATHS ${LLVM_ROOT}/bin REQUIRED)

# Linker Flags
if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
  set(LLVM_LDFLAGS "/MANIFEST:NO")
else()
  set(LLVM_LDFLAGS "")
endif()

set(LLVM_LDFLAGS "${LLVM_LDFLAGS} /LIBPATH:${LLVM_ROOT}/win/lib")
set(LLVM_LDFLAGS "${LLVM_LDFLAGS} /LIBPATH:${LLVM_ROOT}/win/crt/lib")
set(LLVM_LDFLAGS "${LLVM_LDFLAGS} /LIBPATH:${LLVM_ROOT}/win/sdk/lib/ucrt")
set(LLVM_LDFLAGS "${LLVM_LDFLAGS} /LIBPATH:${LLVM_ROOT}/win/sdk/lib/um")

foreach(LINKER SHARED MODULE EXE)
  set(CMAKE_${LINKER}_LINKER_FLAGS "${LLVM_LDFLAGS}" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_DEBUG "/DEBUG /INCREMENTAL" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_RELEASE "/OPT:REF /OPT:ICF /INCREMENTAL:NO" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_MINSIZEREL "/OPT:REF /OPT:ICF /INCREMENTAL:NO" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_RELWITHDEBINFO "/DEBUG /INCREMENTAL" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_COVERAGE "/DEBUG /INCREMENTAL" CACHE STRING "")
endforeach()

unset(LLVM_LDFLAGS)

# Tools
find_program(CMAKE_MT llvm-mt mt.exe PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_RC_COMPILER llvm-rc rc.exe PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

if(LLVM_ENABLE_CCACHE)
  find_program(CCACHE ccache REQUIRED NO_CACHE)
  set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE} CACHE PATH "")
  set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE} CACHE PATH "")
  unset(CCACHE)
endif()

# Debug Configurations
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug RelWithDebInfo)
