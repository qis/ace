# System
include(${ACE}/sys/arch.cmake)

if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
  set(CMAKE_CROSSCOMPILING ON CACHE BOOL "")
  set(CMAKE_SYSTEM_NAME Windows CACHE STRING "")
  set(CMAKE_SYSTEM_VERSION 10.0 CACHE STRING "")
  set(CMAKE_SYSTEM_PROCESSOR AMD64 CACHE STRING "")
  set(CMAKE_SYSROOT ${ACE_TARGET_ROOT} CACHE PATH "")
endif()

# Search Paths
if(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
  list(APPEND CMAKE_SYSTEM_PROGRAM_PATH
    ${ACE_SYSTEM_ROOT}/sdk/bin)
endif()

set(CMAKE_SYSTEM_INCLUDE_PATH
  ${ACE_TARGET_ROOT}/include
  ${ACE_TARGET_ROOT}/crt/include
  ${ACE_TARGET_ROOT}/sdk/include/shared
  ${ACE_TARGET_ROOT}/sdk/include/ucrt
  ${ACE_TARGET_ROOT}/sdk/include/um
  CACHE PATH "")

set(CMAKE_SYSTEM_LIBRARY_PATH
  ${ACE_TARGET_ROOT}/crt/lib
  ${ACE_TARGET_ROOT}/sdk/lib/ucrt
  ${ACE_TARGET_ROOT}/sdk/lib/um
  CACHE PATH "")

# Compiler
find_program(CMAKE_C_COMPILER clang-cl PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_CXX_COMPILER clang-cl PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_ASM_COMPILER clang-cl PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_ASM_NASM_COMPILER yasm PATHS ${CMAKE_SYSTEM_PROGRAM_PATH})

if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
  set(CMAKE_C_COMPILER_TARGET ${ACE_TARGET} CACHE STRING "")
  set(CMAKE_CXX_COMPILER_TARGET ${ACE_TARGET} CACHE STRING "")
  set(CMAKE_ASM_COMPILER_TARGET ${ACE_TARGET} CACHE STRING "")
else()
  set(CMAKE_ASM_MASM_COMPILER ${ACE}/bin/ml64.exe CACHE PATH "")
  set(CMAKE_ASM_MASM_FLAGS_INIT "/nologo")
endif()

# Compiler Flags
set(CMAKE_C_EXTENSIONS OFF CACHE BOOL "")
set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "")

cmake_policy(SET CMP0091 NEW)
cmake_policy(SET CMP0092 NEW)

if(NOT BUILD_SHARED_LIBS AND (NOT "${VCPKG_CRT_LINKAGE}" STREQUAL "dynamic"))
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<NOT:$<CONFIG:Release>>:DLL>" CACHE STRING "")
else()
  set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreadedDLL" CACHE STRING "")
endif()

set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON CACHE STRING "")
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG OFF CACHE INTERNAL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE OFF CACHE INTERNAL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_MINSIZEREL OFF CACHE INTERNAL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO OFF CACHE INTERNAL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_COVERAGE OFF CACHE INTERNAL "" FORCE)

set(CFLAGS_LTO)
if(CMAKE_INTERPROCEDURAL_OPTIMIZATION)
  set(CFLAGS_LTO "-flto=thin -fwhole-program-vtables")
endif()

set(CFLAGS "-march=${ACE_ARCH} /permissive- /FC")
set(CFLAGS "${CFLAGS} -fmerge-all-constants")
set(CFLAGS "${CFLAGS} -fms-compatibility-version=19.30")
set(CFLAGS "${CFLAGS} -Wno-language-extension-token")
set(CFLAGS "${CFLAGS} /DWINVER=0x0A00 /D_WIN32_WINNT=0x0A00")

set(CMAKE_C_FLAGS_INIT "${CFLAGS}")
set(CMAKE_C_FLAGS_DEBUG "/RTC1 /Zi" CACHE STRING "")
set(CMAKE_C_FLAGS_RELEASE "/O2 /DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_C_FLAGS_MINSIZEREL "/O1 /Ob1 /DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "/O1 /Ob1 /Zi /DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_C_FLAGS_COVERAGE "/RTC1 /Zi -fprofile-instr-generate -fcoverage-mapping" CACHE STRING "")

set(CMAKE_CXX_FLAGS_INIT "${CFLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "/RTC1 /Zi" CACHE STRING "")
set(CMAKE_CXX_FLAGS_RELEASE "/O2 /DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_MINSIZEREL "/O1 /Ob1 /DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/O1 /Ob1 /Zi /DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_COVERAGE "/RTC1 /Zi -fprofile-instr-generate -fcoverage-mapping" CACHE STRING "")

unset(CFLAGS)
unset(CFLAGS_LTO)

# Include Directories
set(CMAKE_C_STANDARD_INCLUDE_DIRECTORIES ${CMAKE_SYSTEM_INCLUDE_PATH} CACHE STRING "")
set(CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES ${CMAKE_SYSTEM_INCLUDE_PATH} CACHE STRING "")
set(CMAKE_RC_STANDARD_INCLUDE_DIRECTORIES ${CMAKE_SYSTEM_INCLUDE_PATH} CACHE STRING "")

# Linker
find_program(CMAKE_AR llvm-lib PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_LINKER lld-link PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Linker Flags
set(LDFLAGS "/LIBPATH:${ACE_TARGET_ROOT}/crt/lib")
set(LDFLAGS "${LDFLAGS} /LIBPATH:${ACE_TARGET_ROOT}/sdk/lib/ucrt")
set(LDFLAGS "${LDFLAGS} /LIBPATH:${ACE_TARGET_ROOT}/sdk/lib/um")

if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
  set(LDFLAGS "${LDFLAGS} /MANIFEST:NO")
endif()

foreach(LINKER SHARED MODULE EXE)
  set(CMAKE_${LINKER}_LINKER_FLAGS_INIT "${LDFLAGS}")
  set(CMAKE_${LINKER}_LINKER_FLAGS_DEBUG "/DEBUG /INCREMENTAL" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_RELEASE "/OPT:REF /OPT:ICF /INCREMENTAL:NO" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_MINSIZEREL "/OPT:REF /OPT:ICF /INCREMENTAL:NO" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_RELWITHDEBINFO "/DEBUG /INCREMENTAL" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_COVERAGE "/DEBUG /INCREMENTAL" CACHE STRING "")
endforeach()

unset(LDFLAGS)

# Resource Compiler
find_program(CMAKE_RC_COMPILER llvm-rc rc.exe PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Resource Compiler Flags
set(CMAKE_RC_FLAGS "/nologo -DWIN32" CACHE STRING "")

# Tools
find_program(CMAKE_MT llvm-mt mt.exe PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Debug Configurations
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug RelWithDebInfo)
