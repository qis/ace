# Linux
# x86-64: CMOV, CMPXCHG8B, FPU, FXSR, MMX, FXSR, SCE, SSE, SSE2
# x86-64-v2: (close to Nehalem) CMPXCHG16B, LAHF-SAHF, POPCNT, SSE3, SSE4.1, SSE4.2, SSSE3
# x86-64-v3: (close to Haswell) AVX, AVX2, BMI1, BMI2, F16C, FMA, LZCNT, MOVBE, XSAVE
# x86-64-v4: AVX512F, AVX512BW, AVX512CD, AVX512DQ, AVX512VL
set(ACE_ARCH x86-64-v3 CACHE STRING "")

# System
if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
  set(CMAKE_CROSSCOMPILING ON CACHE BOOL "")
  set(CMAKE_SYSTEM_NAME Linux CACHE STRING "")
  set(CMAKE_SYSTEM_VERSION 5.10 CACHE STRING "")
  set(CMAKE_SYSTEM_PROCESSOR AMD64 CACHE STRING "")
  set(CMAKE_SYSROOT ${ACE_TARGET_ROOT} CACHE PATH "")
endif()

# Runtime Path
set(CMAKE_BUILD_RPATH_USE_ORIGIN ON CACHE BOOL "")
set(CMAKE_BUILD_RPATH
  ${ACE_TARGET_ROOT}/lib
  ${ACE_TARGET_ROOT}/usr/lib/x86_64-linux-gnu
  CACHE PATH "")

# Compiler
find_program(CMAKE_C_COMPILER clang PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_CXX_COMPILER clang++ PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_ASM_COMPILER clang PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_ASM_NASM_COMPILER yasm PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
  set(CMAKE_C_COMPILER_TARGET ${ACE_TARGET} CACHE STRING "")
  set(CMAKE_CXX_COMPILER_TARGET ${ACE_TARGET} CACHE STRING "")
  set(CMAKE_ASM_COMPILER_TARGET ${ACE_TARGET} CACHE STRING "")
endif()

# Compiler Flags
set(CMAKE_C_EXTENSIONS OFF CACHE BOOL "")
set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "")
set(CMAKE_POSITION_INDEPENDENT_CODE ON CACHE BOOL "")

set(CMAKE_INTERPROCEDURAL_OPTIMIZATION ON CACHE STRING "")
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG OFF CACHE INTERNAL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE OFF CACHE INTERNAL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_MINSIZEREL OFF CACHE INTERNAL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO OFF CACHE INTERNAL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_COVERAGE OFF CACHE INTERNAL "" FORCE)

set(CFLAGS_LTO)
if(CMAKE_INTERPROCEDURAL_OPTIMIZATION)
  set(CFLAGS_LTO "-flto=thin -fwhole-program-vtables")
endif()

set(CFLAGS "-march=${ACE_ARCH} -fasm")
set(CFLAGS "${CFLAGS} -fdiagnostics-absolute-paths")
set(CFLAGS "${CFLAGS} -fmerge-all-constants")

set(CMAKE_C_FLAGS_INIT "${CFLAGS}")
set(CMAKE_C_FLAGS_DEBUG "-g" CACHE STRING "")
set(CMAKE_C_FLAGS_RELEASE "-O3 -DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_C_FLAGS_MINSIZEREL "-Oz -DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_C_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_C_FLAGS_COVERAGE "-g -fprofile-instr-generate -fcoverage-mapping" CACHE STRING "")

if(NOT CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
  set(CFLAGS "${CFLAGS} -stdlib=libc++")
endif()

set(CMAKE_CXX_FLAGS_INIT "${CFLAGS}")
set(CMAKE_CXX_FLAGS_DEBUG "-g" CACHE STRING "")
set(CMAKE_CXX_FLAGS_RELEASE "-O3 -DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_MINSIZEREL "-Oz -DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -g -DNDEBUG ${CFLAGS_LTO}" CACHE STRING "")
set(CMAKE_CXX_FLAGS_COVERAGE "-g -fprofile-instr-generate -fcoverage-mapping" CACHE STRING "")

unset(CFLAGS)
unset(CFLAGS_LTO)

# Linker
find_program(CMAKE_AR llvm-ar PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_NM llvm-nm PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_LINKER lld PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Linker Flags
if(NOT BUILD_SHARED_LIBS AND (NOT "${VCPKG_LIBRARY_LINKAGE}" STREQUAL "dynamic"))
  set(LDFLAGS_RELEASE "-s -static-libstdc++")
else()
  set(LDFLAGS_RELEASE "-s")
endif()

foreach(LINKER SHARED MODULE EXE)
  set(CMAKE_${LINKER}_LINKER_FLAGS_INIT "-ldl")
  set(CMAKE_${LINKER}_LINKER_FLAGS_DEBUG "" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_RELEASE "${LDFLAGS_RELEASE}" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_MINSIZEREL "-s" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_RELWITHDEBINFO "" CACHE STRING "")
  set(CMAKE_${LINKER}_LINKER_FLAGS_COVERAGE "" CACHE STRING "")
endforeach()

unset(LDFLAGS_RELEASE)

# Standard Libraries
set(CMAKE_C_STANDARD_LIBRARIES "-Wno-unused-command-line-argument")

# Tools
find_program(CMAKE_RANLIB llvm-ranlib PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_OBJCOPY llvm-objcopy PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_OBJDUMP llvm-objdump PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_STRIP llvm-strip PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_SIZE llvm-size PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Debug Configurations
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug RelWithDebInfo)
