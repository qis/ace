diff --git c/.clangd w/.clangd
new file mode 100644
index 000000000..abfe46c61
--- /dev/null
+++ w/.clangd
@@ -0,0 +1,10 @@
+CompileFlags:
+  Add: [ -xc++, -std=c++17 ]
+  CompilationDatabase: /opt/ace/build/llvm-debug
+Diagnostics:
+  ClangTidy:
+    FastCheckFilter: None
+  MissingIncludes: None
+  UnusedIncludes: None
+InlayHints:
+  Enabled: No
diff --git c/clang/include/clang/AST/OperationKinds.def w/clang/include/clang/AST/OperationKinds.def
index 8788b8ff0..5c89c3e4e 100644
--- c/clang/include/clang/AST/OperationKinds.def
+++ w/clang/include/clang/AST/OperationKinds.def
@@ -446,6 +446,8 @@ UNARY_OPERATION(Imag, "__imag")
 UNARY_OPERATION(Extension, "__extension__")
 // [C++ Coroutines] co_await operator
 UNARY_OPERATION(Coawait, "co_await")
+// [AH] __unwrap__ operator
+UNARY_OPERATION(Unwrap, "__unwrap__")
 
 #undef CAST_OPERATION
 #undef BINARY_OPERATION
diff --git c/clang/include/clang/Basic/DiagnosticSemaKinds.td w/clang/include/clang/Basic/DiagnosticSemaKinds.td
index ec2a140e0..6d7384ae1 100644
--- c/clang/include/clang/Basic/DiagnosticSemaKinds.td
+++ w/clang/include/clang/Basic/DiagnosticSemaKinds.td
@@ -12010,6 +12010,13 @@ def note_redefinition_include_same_file : Note<
   "'%0' included multiple times, additional include site here">;
 }
 
+let CategoryName = "Unwrap Issue" in {
+def err_unwrap_message : Error<
+  "'__unwrap__' %0">;
+def err_unwrap_operand : Error<
+  "'__unwrap__' operand %0 %1">;
+} // end of unwrap issue category
+
 let CategoryName = "Coroutines Issue" in {
 def err_return_in_coroutine : Error<
   "return statement not allowed in coroutine; did you mean 'co_return'?">;
diff --git c/clang/include/clang/Basic/TokenKinds.def w/clang/include/clang/Basic/TokenKinds.def
index 8902a20b0..cce540446 100644
--- c/clang/include/clang/Basic/TokenKinds.def
+++ w/clang/include/clang/Basic/TokenKinds.def
@@ -478,6 +478,9 @@ KEYWORD(__FUNCTION__                , KEYALL)
 KEYWORD(__PRETTY_FUNCTION__         , KEYALL)
 KEYWORD(__auto_type                 , KEYALL)
 
+// AH Extensions
+KEYWORD(__unwrap__                  , KEYCXX)
+
 // MS Extensions
 KEYWORD(__FUNCDNAME__               , KEYMS)
 KEYWORD(__FUNCSIG__                 , KEYMS)
diff --git c/clang/include/clang/Sema/Sema.h w/clang/include/clang/Sema/Sema.h
index d8cc0171c..e1cdca974 100644
--- c/clang/include/clang/Sema/Sema.h
+++ w/clang/include/clang/Sema/Sema.h
@@ -6844,6 +6844,8 @@ public:
   ExprResult ActOnUnaryOp(Scope *S, SourceLocation OpLoc, tok::TokenKind Op,
                           Expr *Input, bool IsAfterAmp = false);
 
+  ExprResult ActOnUnwrapOp(Scope *S, SourceLocation Loc, Expr *E);
+
   /// Determine whether the given expression is a qualified member
   /// access expression, of a form that could be turned into a pointer to member
   /// with the address-of operator.
diff --git c/clang/lib/Parse/ParseExpr.cpp w/clang/lib/Parse/ParseExpr.cpp
index 2fab1dfed..dfdd34dc7 100644
--- c/clang/lib/Parse/ParseExpr.cpp
+++ w/clang/lib/Parse/ParseExpr.cpp
@@ -1509,6 +1509,17 @@ ExprResult Parser::ParseCastExpression(CastParseKind ParseKind,
     return Res;
   }
 
+  case tok::kw___unwrap__: {  // unary-expression: '__unwrap__' cast-expression [AH]
+    if (NotPrimaryExpression)
+      *NotPrimaryExpression = true;
+    const SourceLocation UnwrapLoc = ConsumeToken();
+    Res = ParseCastExpression(UnaryExprOnly);
+    if (!Res.isInvalid())
+      return Actions.ActOnUnwrapOp(getCurScope(), UnwrapLoc, Res.get());
+    Actions.Diag(UnwrapLoc, diag::err_unwrap_message) << "subexpression is invalid";
+    return ExprError();
+  }
+
   case tok::kw_co_await: {  // unary-expression: 'co_await' cast-expression
     if (NotPrimaryExpression)
       *NotPrimaryExpression = true;
diff --git c/clang/lib/Sema/SemaCodeComplete.cpp w/clang/lib/Sema/SemaCodeComplete.cpp
index bc0f6a943..422b1bced 100644
--- c/clang/lib/Sema/SemaCodeComplete.cpp
+++ w/clang/lib/Sema/SemaCodeComplete.cpp
@@ -568,6 +568,7 @@ static QualType getPreferredTypeOfUnaryArg(Sema &S, QualType ContextType,
     return ContextType;
   case tok::kw___real:
   case tok::kw___imag:
+  case tok::kw___unwrap__:
     return QualType();
   default:
     assert(false && "unhandled unary op");
diff --git c/clang/lib/Sema/SemaExpr.cpp w/clang/lib/Sema/SemaExpr.cpp
index e253e3a17..55cdeca75 100644
--- c/clang/lib/Sema/SemaExpr.cpp
+++ w/clang/lib/Sema/SemaExpr.cpp
@@ -15721,6 +15721,11 @@ ExprResult Sema::CreateBuiltinUnaryOp(SourceLocation OpLoc,
              "the co_await expression must be non-dependant before "
              "building operator co_await");
       return Input;
+    case UO_Unwrap:
+      assert(!Input.get()->getType()->isDependentType() &&
+             "the co_await expression must be non-dependant before "
+             "building operator co_await");
+      return Input;
     }
   }
   if (resultType.isNull() || Input.isInvalid())
@@ -15835,6 +15840,275 @@ ExprResult Sema::ActOnUnaryOp(Scope *S, SourceLocation OpLoc, tok::TokenKind Op,
                       IsAfterAmp);
 }
 
+// clang-format off
+ExprResult Sema::ActOnUnwrapOp(Scope *S, SourceLocation Loc, Expr *Operand) {
+  assert(S && "Invalid scope");
+  assert(Operand && "Invalid operand");
+
+  // Ensure evaluated context.
+  if (isUnevaluatedContext())
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << "used in an unevaluated context");
+
+  // Ignore previous expression evaluation contexts.
+  EnterExpressionEvaluationContext EvaluationContext(
+      *this, Sema::ExpressionEvaluationContext::PotentiallyEvaluated);
+
+  // Get function declaration.
+  FunctionDecl *FunctionDeclaration = dyn_cast<FunctionDecl>(CurContext);
+
+  // Ensure presence of an enclosing function body.
+  if (!FunctionDeclaration)
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << "used in a non-function context");
+
+  // Ensure enclosing function is not 'main'.
+  if (FunctionDeclaration->isMain())
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << "used in the 'main' function");
+
+  // Get method declaration.
+  CXXMethodDecl *MethodDeclaration = dyn_cast<CXXMethodDecl>(FunctionDeclaration);
+
+  // Ensure enclosing function is not a constructor.
+  if (isa_and_nonnull<CXXConstructorDecl>(MethodDeclaration))
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << "used in a constructor");
+
+  // Ensure enclosing function is not a destructor.
+  if (isa_and_nonnull<CXXDestructorDecl>(MethodDeclaration))
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << "used in a destructor");
+
+  // Get function return type.
+  QualType FunctionReturnType = FunctionDeclaration->getReturnType();
+
+  // Ensure enclosing function return type is not 'void'.
+  if (FunctionReturnType->isVoidType())
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << "used in a function that returns 'void'");
+
+  // Get operand source range.
+  SourceRange ESR = Operand->getSourceRange();
+
+  // Ensure operand is not type dependent.
+  if (Operand->isTypeDependent())
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << ESR << "operand is type dependent");
+
+  // Ensure operand is not value dependent.
+  if (Operand->isValueDependent())
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << ESR << "operand is value dependent");
+
+  // Ensure operand is not instantiation dependent.
+  if (Operand->isInstantiationDependent())
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << ESR << "operand is instantiation dependent");
+
+  // Get operand type.
+  QualType OperandType = Operand->getType();
+
+  // Ensure operand type is valid.
+  if (OperandType.isNull())
+    return ExprError(Diag(Loc, diag::err_unwrap_message)
+        << ESR << "operand has invalid type");
+
+  // Ensure operand type is not incomplete.
+  if (OperandType->isIncompleteType())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "is incomplete");
+
+  // Ensure operand type is not dependent.
+  if (OperandType->isDependentType())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "is dependent");
+
+  // Ensure operand type is a class or struct.
+  if (!OperandType->isRecordType())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "is not a class or a struct");
+
+  ExprResult OperandBool = PerformContextuallyConvertToBool(Operand);
+  if (OperandBool.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "has no bool conversion");
+
+  // Try to evaluate `operand` as `bool`.
+  bool IsOperandTrue = false;
+  bool IsOperandConstexpr = OperandBool.get()->EvaluateAsBooleanCondition(
+      IsOperandTrue, Context, isConstantEvaluatedContext());
+
+  // Create result.
+  SmallVector<Stmt *, 3> Result;
+
+  // Deduce type and replace `operand` with a temporary variable.
+  bool IsOperandTemporary = !IsOperandConstexpr && !Operand->isLValue();
+  if (IsOperandTemporary) {
+    // Get non-reference type for `operand` expression.
+    QualType BaseType = OperandType.getNonReferenceType().getCanonicalType();
+    if (BaseType.isNull())
+      return ExprError(Diag(Loc, diag::err_unwrap_operand)
+          << ESR << OperandType << "has invalid base type");
+
+    // Create rvalue reference type for `auto&&` expression.
+    QualType RefType = Context.getRValueReferenceType(BaseType);
+    TypeSourceInfo *RefTypeInfo = Context.getTrivialTypeSourceInfo(RefType, Loc);
+    if (!RefTypeInfo)
+      return ExprError(Diag(Loc, diag::err_unwrap_operand)
+          << ESR << OperandType << "failed to create temporary variable type info");
+
+    // Create `auto&& __rv` expression.
+    VarDecl *Variable = VarDecl::Create(Context, FunctionDeclaration, Loc, Loc,
+        &Context.Idents.get("__rv"), RefType, RefTypeInfo, SC_None);
+    if (!Variable)
+      return ExprError(Diag(Loc, diag::err_unwrap_operand)
+          << ESR << OperandType << "failed to create temporary variable");
+
+    // Set `auto&& __rv` expression initializer.
+    // XXX: APValue::getStructField(unsigned int): `isStruct() && "Invalid accessor"` assertion.
+    // AddInitializerToDecl(Variable,
+    //     CreateMaterializeTemporaryExpr(BaseType, Operand, false), false);
+    AddInitializerToDecl(Variable, Operand, false);
+    if (Variable->isInvalidDecl())
+      return ExprError(Diag(Loc, diag::err_unwrap_operand)
+          << ESR << OperandType << "failed to initialize temporary variable");
+
+    // Add `auto&& __rv = operand` expression.
+    Result.push_back(new (Context) DeclStmt(DeclGroupRef(Variable), Loc, Loc));
+    Variable->markUsed(Context);
+
+    // Update `operand` expression and type.
+    Operand = new (Context) DeclRefExpr(Context, Variable, false, BaseType, VK_LValue, Loc);
+    OperandType = BaseType;
+  }
+
+  // Create `!operand` expression.
+  ExprResult NotOperand = ActOnUnaryOp(S, Loc, tok::exclaim, Operand);
+  if (NotOperand.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "has no 'bool' conversion");
+
+  // Create "error" member.
+  UnqualifiedId ErrorMember;
+  ErrorMember.setIdentifier(&Context.Idents.get("error"), Loc);
+
+  // Create `operand.error` expression.
+  CXXScopeSpec SS;
+  ExprResult ErrorMemberAccess = ActOnMemberAccessExpr(
+      S, Operand, Loc, tok::period, SS, SourceLocation(), ErrorMember, nullptr);
+  if (ErrorMemberAccess.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "has no '.error' member");
+
+  // Create `operand.error()` expression.
+  ExprResult ErrorCall = ActOnCallExpr(S, ErrorMemberAccess.get(), Loc, {}, Loc, nullptr);
+  if (ErrorCall.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "has no '.error()' member function");
+
+  // Create `return operand.error()` expression.
+  StmtResult ReturnError = ActOnReturnStmt(Loc, ErrorCall.get(), S);
+  if (ReturnError.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "'.error()' return type incompatible with enclosing function");
+
+  // Create `if (!operand)` expression.
+  ConditionResult IfNotOperand = ActOnCondition(S, Loc, NotOperand.get(), ConditionKind::Boolean);
+  if (IfNotOperand.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "has no 'bool' conversion");
+
+  // Create `if (!operand) return operand.error()` expression.
+  StmtResult IfNotOperandReturnError = ActOnIfStmt(Loc, IfStatementKind::Ordinary,
+      Loc, nullptr, IfNotOperand, Loc, ReturnError.get(), Loc, nullptr);
+  if (IfNotOperandReturnError.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "cannot be used in an if statement");
+
+  // Replace `operand` by its xvalue.
+  if (IsOperandTemporary) {
+    QualType OperandRValueType = Context.getRValueReferenceType(OperandType);
+    ExprResult OperandRValue = BuildCXXNamedCast(Loc, tok::kw_static_cast,
+        Context.getTrivialTypeSourceInfo(OperandRValueType, Loc),
+        Operand, SourceRange(Loc, Loc), SourceRange(Loc, Loc));
+    if (!OperandRValue.isInvalid()) {
+      Operand = OperandRValue.get();
+      OperandType = OperandRValueType;
+    }
+  }
+
+  // Create `*operand` expression.
+  ExprResult DerefOperand = ActOnUnaryOp(S, Loc, tok::star, Operand);
+  if (DerefOperand.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "has no dereference conversion");
+
+  // Determine the result type.
+  QualType ResultType = DerefOperand.get()->getType().getNonReferenceType();
+  if (ResultType.isNull())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "dereference operator has invalid type");
+
+  // Add `return operand.error()` or `if (!operand) return operand.error()` expression.
+  if (IsOperandConstexpr) {
+    if (!IsOperandTrue) {
+      Result.push_back(ReturnError.get());
+    }
+  } else {
+    Result.push_back(IfNotOperandReturnError.get());
+  }
+
+  // Replace `*operand` expression with construct expression for xvalue records.
+  if (ResultType->isRecordType() && DerefOperand.get()->getValueKind() != VK_LValue) {
+    // Create construct expression.
+    TypeSourceInfo *TSInfo = Context.getTrivialTypeSourceInfo(ResultType, Loc);
+    ParsedType TypeRep = ParsedType::make(TSInfo->getType());
+    Expr *DerefExpr = DerefOperand.get();
+    MultiExprArg InitArgs(&DerefExpr, 1);
+    DerefOperand = ActOnCXXTypeConstructExpr(TypeRep, Loc, InitArgs, Loc, false);
+    if (DerefOperand.isInvalid())
+      return ExprError(Diag(Loc, diag::err_unwrap_operand)
+          << ESR << OperandType << "failed to construct dereference result");
+
+    // Try to strip functional cast from construct expression.
+    if (CXXFunctionalCastExpr *CastExpr = dyn_cast<CXXFunctionalCastExpr>(DerefOperand.get())) {
+      Expr *ResultExpr = CastExpr->getSubExpr();
+      if (isa_and_nonnull<CXXConstructExpr>(ResultExpr))
+        DerefOperand = ResultExpr;
+    }
+  }
+
+  // Add `*operand` expression.
+  Result.push_back(DerefOperand.get());
+
+  // Create compound statement.
+  ActOnStartOfCompoundStmt(false);
+  StmtResult CompoundExpression = ActOnCompoundStmt(Loc, Loc, Result, true);
+  if (CompoundExpression.isInvalid())
+    return ExprError(Diag(Loc, diag::err_unwrap_operand)
+        << ESR << OperandType << "invalid compound statement");
+  ActOnFinishOfCompoundStmt();
+
+  // Create compound statement expression.
+  Expr *Expression = new (Context) StmtExpr(
+      CompoundExpression.getAs<CompoundStmt>(), ResultType, Loc, Loc, 0);
+
+  // Finish compound statement expression.
+  // TODO: Probably unnecessary.
+  // if (!IsOperandConstexpr) {
+  //   ExprResult FinishedExpression = ActOnFinishFullExpr(Expression, Loc, false, false, false);
+  //   if (FinishedExpression.isInvalid())
+  //     return ExprError(Diag(Loc, diag::err_unwrap_operand)
+  //         << ESR << OperandType << "faild to finish expression");
+  //   Expression = FinishedExpression.get();
+  // }
+
+  // Return compound statement expression.
+  return Expression;
+}
+// clang-format on
+
 ExprResult Sema::ActOnAddrLabel(SourceLocation OpLoc, SourceLocation LabLoc,
                                 LabelDecl *TheDecl) {
   TheDecl->markUsed(Context);
diff --git c/llvm/CMakePresets.json w/llvm/CMakePresets.json
new file mode 100644
index 000000000..99a05dfe5
--- /dev/null
+++ w/llvm/CMakePresets.json
@@ -0,0 +1,82 @@
+{
+  "version": 6,
+  "cmakeMinimumRequired": {
+    "major": 3,
+    "minor": 31
+  },
+  "configurePresets": [
+    {
+      "hidden": true,
+      "name": "default",
+      "generator": "Ninja",
+      "binaryDir": "/opt/ace/build/llvm-${presetName}",
+      "installDir": "/opt/ace/build/llvm-${presetName}-install",
+      "architecture": { "value": "x64", "strategy": "external" },
+      "warnings": { "dev": false },
+      "cacheVariables": {
+        "CMAKE_EXPORT_COMPILE_COMMANDS": true,
+        "CMAKE_C_COMPILER": "/usr/lib/llvm/19/bin/clang",
+        "CMAKE_CXX_COMPILER": "/usr/lib/llvm/19/bin/clang++",
+        "LLVM_ENABLE_PROJECTS": "clang;clang-tools-extra",
+        "LLVM_TARGETS_TO_BUILD": "X86",
+        "LLVM_ENABLE_BINDINGS": false,
+        "LLVM_ENABLE_DOXYGEN": false,
+        "LLVM_ENABLE_LIBCXX": true,
+        "LLVM_ENABLE_LLD": true,
+        "LLVM_ENABLE_LTO": false,
+        "LLVM_ENABLE_PER_TARGET_RUNTIME_DIR": true,
+        "LLVM_ENABLE_WARNINGS": false,
+        "LLVM_INCLUDE_BENCHMARKS": false,
+        "LLVM_INCLUDE_EXAMPLES": false,
+        "LLVM_INCLUDE_TESTS": false,
+        "LLVM_INCLUDE_DOCS": false
+      }
+    },
+    {
+      "name": "debug",
+      "displayName": "Debug",
+      "inherits": "default",
+      "cacheVariables": {
+        "CMAKE_BUILD_TYPE": "Debug"
+      }
+    },
+    {
+      "name": "release",
+      "displayName": "Release",
+      "inherits": "default",
+      "cacheVariables": {
+        "CMAKE_BUILD_TYPE": "Release"
+      }
+    }
+  ],
+  "buildPresets": [
+    {
+      "name": "debug",
+      "displayName": "Debug",
+      "configurePreset": "debug"
+    },
+    {
+      "name": "release",
+      "displayName": "Release",
+      "configurePreset": "release"
+    }
+  ],
+  "workflowPresets": [
+    {
+      "name": "debug",
+      "displayName": "Debug",
+      "steps": [
+        { "name": "debug", "type": "configure" },
+        { "name": "debug", "type": "build" }
+      ]
+    },
+    {
+      "name": "release",
+      "displayName": "Release",
+      "steps": [
+        { "name": "release", "type": "configure" },
+        { "name": "release", "type": "build" }
+      ]
+    }
+  ]
+}
