# Toolchain
get_filename_component(ACE ${CMAKE_CURRENT_LIST_DIR}/.. ABSOLUTE CACHE)

# Variables
if(NOT DEFINED BUILD_SHARED_LIBS)
  set(BUILD_SHARED_LIBS OFF CACHE BOOL "")
endif()

set(ACE_SUPPORTED_SYSTEM_NAMES "linux;mingw")
if(NOT ACE_SYSTEM_NAME IN_LIST ACE_SUPPORTED_SYSTEM_NAMES)
  message(FATAL_ERROR "Unsupported ACE_SYSTEM_NAME: ${ACE_SYSTEM_NAME}")
endif()
unset(ACE_SUPPORTED_SYSTEM_NAMES)

set(ACE_SUPPORTED_SYSTEM_ARCHS "x86-64-v2;x86-64-v3")
if(NOT ACE_SYSTEM_ARCH IN_LIST ACE_SUPPORTED_SYSTEM_ARCHS)
  message(FATAL_ERROR "Unsupported ACE_SYSTEM_ARCH: ${ACE_SYSTEM_ARCH}")
endif()
unset(ACE_SUPPORTED_SYSTEM_ARCHS)

# System
if(ACE_SYSTEM_NAME STREQUAL "linux")
  set(CMAKE_SYSTEM_NAME Linux CACHE STRING "" FORCE)
  set(CMAKE_SYSTEM_VERSION 5.10.0 CACHE STRING "" FORCE)
elseif(ACE_SYSTEM_NAME STREQUAL "mingw")
  set(CMAKE_SYSTEM_NAME Windows CACHE STRING "" FORCE)
  set(CMAKE_SYSTEM_VERSION 10.0 CACHE STRING "" FORCE)
endif()

set(CMAKE_CROSSCOMPILING ON CACHE BOOL "" FORCE)
set(CMAKE_SYSTEM_PROCESSOR AMD64 CACHE STRING "" FORCE)
set(CMAKE_SYSROOT ${ACE}/sys/${ACE_SYSTEM_NAME} CACHE PATH "" FORCE)

# Search Paths
list(APPEND CMAKE_MODULE_PATH ${ACE}/cmake)

set(CMAKE_FIND_ROOT_PATH ${ACE} CACHE PATH "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY CACHE STRING "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY CACHE STRING "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY CACHE STRING "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH CACHE STRING "" FORCE)

set(CMAKE_FIND_PACKAGE_PREFER_CONFIG ON CACHE BOOL "" FORCE)

set(CMAKE_PREFIX_PATH
  ${ACE}/ports/${ACE_SYSTEM_NAME}-${ACE_SYSTEM_ARCH}
  ${ACE}/ports/${ACE_SYSTEM_NAME}-${ACE_SYSTEM_ARCH}/lib/pkgconfig
  CACHE PATH "")

set(ENV{PKG_CONFIG_PATH}
  ${ACE}/ports/${ACE_SYSTEM_NAME}-${ACE_SYSTEM_ARCH}/lib/pkgconfig)

set(PKG_CONFIG_USE_CMAKE_PREFIX_PATH ON CACHE BOOL "")

file(GLOB ACE_PORTS_TOOLS_PATH
  ${ACE}/ports/linux-x86-64-v3/tools
  ${ACE}/ports/linux-x86-64-v3/tools/*
  LIST_DIRECTORIES ON)

set(ACE_PROGRAM_PATH ${ACE}/bin)

foreach(path ${ACE_PORTS_TOOLS_PATH})
  if(IS_DIRECTORY ${path})
    list(APPEND ACE_PROGRAM_PATH ${path})
  endif()
endforeach()

unset(ACE_PORTS_TOOLS_PATH)

set(CMAKE_SYSTEM_PROGRAM_PATH ${ACE_PROGRAM_PATH} CACHE PATH "")

unset(ACE_SYSTEM_PROGRAM_PATH)

# Compiler
find_program(CMAKE_C_COMPILER clang
  PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_CXX_COMPILER clang++
  PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_CXX_COMPILER_CLANG_SCAN_DEPS clang-scan-deps
  PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_ASM_COMPILER clang
  PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_ASM_NASM_COMPILER yasm
  PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Compiler Targets
if(ACE_SYSTEM_NAME STREQUAL "linux")
  set(ACE_COMPILER_TARGET x86_64-pc-linux-gnu)
else()
  set(ACE_COMPILER_TARGET x86_64-w64-mingw32)
endif()

set(CMAKE_C_COMPILER_TARGET ${ACE_COMPILER_TARGET} CACHE STRING "" FORCE)
set(CMAKE_CXX_COMPILER_TARGET ${ACE_COMPILER_TARGET} CACHE STRING "" FORCE)
set(CMAKE_ASM_COMPILER_TARGET ${ACE_COMPILER_TARGET} CACHE STRING "" FORCE)
set(CMAKE_ASM_NASM_COMPILER_TARGET ${ACE_COMPILER_TARGET} CACHE STRING "" FORCE)

unset(ACE_COMPILER_TARGET)

# Compiler Flags
set(CMAKE_C_EXTENSIONS OFF CACHE BOOL "")
set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "")

cmake_policy(SET CMP0063 NEW)
set(CMAKE_C_VISIBILITY_PRESET hidden CACHE STRING "")
set(CMAKE_CXX_VISIBILITY_PRESET hidden CACHE STRING "")

cmake_policy(SET CMP0069 NEW)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF CACHE BOOL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG OFF CACHE BOOL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE OFF CACHE BOOL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_MINSIZEREL OFF CACHE BOOL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO OFF CACHE BOOL "" FORCE)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_COVERAGE OFF CACHE BOOL "" FORCE)

set(CMAKE_C_FLAGS_INIT "-march=${ACE_SYSTEM_ARCH}")

if(ACE_SYSTEM_ARCH STREQUAL "x86-64-v3")
  set(CMAKE_C_FLAGS_INIT "${CMAKE_C_FLAGS_INIT} -mavx2")
endif()

if(ACE_SYSTEM_NAME STREQUAL "mingw")
  # Visual Studio 2022 Version 17.10 sets _MSC_VER to 1940.
  # https://learn.microsoft.com/cpp/overview/compiler-versions?view=msvc-170
  # MinGW is already configured to define WINVER=0x0A00 and _WIN32_WINNT=0x0A00.
  set(CMAKE_C_FLAGS_INIT "${CMAKE_C_FLAGS_INIT} -fms-compatibility-version=19.40")
endif()

set(CMAKE_C_FLAGS_INIT "${CMAKE_C_FLAGS_INIT} -fomit-frame-pointer")

set(CMAKE_C_FLAGS_DEBUG_INIT "")
set(CMAKE_C_FLAGS_RELEASE_INIT "-flto")
set(CMAKE_C_FLAGS_MINSIZEREL_INIT "-flto")
set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "")
set(CMAKE_C_FLAGS_COVERAGE_INIT "-g -fprofile-instr-generate -fcoverage-mapping")

set(CMAKE_CXX_FLAGS_INIT "${CMAKE_C_FLAGS_INIT} -fstrict-vtable-pointers -fno-exceptions -fno-rtti")

if(NOT BUILD_SHARED_LIBS)
  set(CMAKE_CXX_STANDARD_LIBRARIES "-static-libstdc++" CACHE STRING "" FORCE)
endif()

set(CMAKE_CXX_FLAGS_DEBUG_INIT "${CMAKE_C_FLAGS_DEBUG_INIT}")
set(CMAKE_CXX_FLAGS_RELEASE_INIT "${CMAKE_C_FLAGS_RELEASE_INIT} -fwhole-program-vtables")
set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT "${CMAKE_C_FLAGS_MINSIZEREL_INIT} -fwhole-program-vtables")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT}")
set(CMAKE_CXX_FLAGS_COVERAGE_INIT "${CMAKE_C_FLAGS_COVERAGE_INIT}")

set(CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES
  ${ACE}/sys/${ACE_SYSTEM_NAME}/${ACE_SYSTEM_ARCH}/include/c++/v1
  CACHE PATH "" FORCE)

# Windows
if(ACE_SYSTEM_NAME STREQUAL "mingw")
  # Embed debug information.
  cmake_policy(SET CMP0141 NEW)
  set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT Embedded CACHE STRING "" FORCE)

  # Use release runtime library.
  cmake_policy(SET CMP0091 NEW)
  set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreadedDLL CACHE STRING "" FORCE)

  # Disable warnings.
  cmake_policy(SET CMP0092 NEW)
endif()

# Linker
find_program(CMAKE_AR llvm-ar PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_NM llvm-nm PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_LINKER lld PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Linker Flags
cmake_policy(SET CMP0083 NEW)
set(CMAKE_POSITION_INDEPENDENT_CODE ${BUILD_SHARED_LIBS} CACHE BOOL "")

cmake_policy(SET CMP0056 NEW)
foreach(LINKER SHARED MODULE EXE)
  if(ACE_SYSTEM_NAME STREQUAL "linux")
    set(CMAKE_${LINKER}_LINKER_FLAGS_INIT "-pthread")
    set(CMAKE_${LINKER}_LINKER_FLAGS_DEBUG_INIT "")
    set(CMAKE_${LINKER}_LINKER_FLAGS_RELEASE_INIT "-s")
    set(CMAKE_${LINKER}_LINKER_FLAGS_MINSIZEREL_INIT "-s")
    set(CMAKE_${LINKER}_LINKER_FLAGS_RELWITHDEBINFO_INIT "")
    set(CMAKE_${LINKER}_LINKER_FLAGS_COVERAGE_INIT "")
  else()
    set(CMAKE_${LINKER}_LINKER_FLAGS_INIT
      "-Xlinker /MANIFEST:NO")
    set(CMAKE_${LINKER}_LINKER_FLAGS_DEBUG_INIT
      "-Xlinker /DEBUG -Xlinker /INCREMENTAL")
    set(CMAKE_${LINKER}_LINKER_FLAGS_RELEASE_INIT
      "-s -Xlinker /OPT:REF -Xlinker /OPT:ICF -Xlinker /INCREMENTAL:NO")
    set(CMAKE_${LINKER}_LINKER_FLAGS_MINSIZEREL_INIT
      "-s -Xlinker /OPT:REF -Xlinker /OPT:ICF -Xlinker /INCREMENTAL:NO")
    set(CMAKE_${LINKER}_LINKER_FLAGS_RELWITHDEBINFO_INIT
      "-Xlinker /DEBUG -Xlinker /INCREMENTAL")
    set(CMAKE_${LINKER}_LINKER_FLAGS_COVERAGE_INIT
      "-Xlinker /DEBUG -Xlinker /INCREMENTAL")
  endif()
endforeach()

set(CMAKE_CXX_STANDARD_LINK_DIRECTORIES
  ${ACE}/sys/${ACE_SYSTEM_NAME}/${ACE_SYSTEM_ARCH}/lib
  CACHE PATH "" FORCE)

# Tools
find_program(CMAKE_RANLIB llvm-ranlib PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_OBJCOPY llvm-objcopy PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_OBJDUMP llvm-objdump PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_STRIP llvm-strip PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_SIZE llvm-size PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

if(ACE_SYSTEM_NAME STREQUAL "mingw")
  # Manifest Generator
  find_program(CMAKE_MT llvm-mt PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

  # Export Table Generator
  find_program(CMAKE_DLLTOOL llvm-dlltool PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

  # Resource Compiler
  find_program(CMAKE_RC_COMPILER llvm-windres PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
  set(CMAKE_RC_FLAGS_INIT "-I ${CMAKE_SYSROOT}/include")

  # Emulator
  set(ACE_WINE "env;WINE_DISABLE_KERNEL_WRITEWATCH=1;WINEDEBUG=-all")
  if(BUILD_SHARED_LIBS)
    set(ACE_WINE "${ACE_WINE};WINEPATH=${ACE}/sys/mingw/${ACE_SYSTEM_ARCH}/bin")
  endif()
  set(CMAKE_CROSSCOMPILING_EMULATOR "${ACE_WINE};wine64" CACHE STRING "")
  unset(ACE_WINE)
endif()

if(ENABLE_CLANG_TIDY)
  set(CMAKE_CXX_CLANG_TIDY ${ACE}/bin/clang-tidy CACHE STRING "")
endif()

# Runtime Path
if(ACE_SYSTEM_NAME STREQUAL "linux")
  set(CMAKE_BUILD_RPATH_USE_ORIGIN ON CACHE BOOL "")
  if(BUILD_SHARED_LIBS)
    set(CMAKE_BUILD_RPATH ${ACE}/sys/linux/${ACE_SYSTEM_ARCH}/lib CACHE PATH "")
  endif()
endif()

# Configurations
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug RelWithDebInfo Coverage)

set(CMAKE_MAP_IMPORTED_CONFIG_DEBUG ";Release" CACHE STRING "")
set(CMAKE_MAP_IMPORTED_CONFIG_MINSIZEREL ";Release" CACHE STRING "")
set(CMAKE_MAP_IMPORTED_CONFIG_RELWITHDEBINFO ";Release" CACHE STRING "")
set(CMAKE_MAP_IMPORTED_CONFIG_COVERAGE ";Release" CACHE STRING "")

# Tests
set_property(GLOBAL PROPERTY CTEST_TARGETS_ADDED 1)

# Platform Variables
set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
  BUILD_SHARED_LIBS
  CMAKE_BUILD_RPATH
  CMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES
  CMAKE_CXX_STANDARD_LINK_DIRECTORIES
  CMAKE_CXX_STANDARD_LIBRARIES
  CMAKE_TOOLCHAIN_FILE
  CACHE STRING "")

# Ports
if(NOT DEFINED VCPKG_TARGET_TRIPLET)
  macro(_add_library)
    add_library(${ARGV})
  endmacro()
  set(VCPKG_TARGET_TRIPLET ${ACE_SYSTEM_NAME}-${ACE_SYSTEM_ARCH})
  set(VCPKG_INSTALLED_DIR ${ACE}/ports)
  set(_VCPKG_INSTALLED_DIR ${VCPKG_INSTALLED_DIR})
endif()

# Modules
list(APPEND CMAKE_PROJECT_INCLUDE ${CMAKE_CURRENT_LIST_DIR}/modules.cmake)
