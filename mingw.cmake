# MinGW Toolchain
include_guard(GLOBAL)
get_filename_component(ACE ${CMAKE_CURRENT_LIST_DIR} ABSOLUTE CACHE)

# System
set(CMAKE_CROSSCOMPILING ON CACHE BOOL "" FORCE)
set(CMAKE_SYSTEM_NAME Windows CACHE STRING "" FORCE)
set(CMAKE_SYSTEM_VERSION 10.0 CACHE STRING "" FORCE)
set(CMAKE_SYSTEM_PROCESSOR AMD64 CACHE STRING "" FORCE)
set(CMAKE_SYSROOT ${ACE}/sys/mingw CACHE PATH "" FORCE)

# Search Paths
set(CMAKE_FIND_ROOT_PATH ${ACE} CACHE PATH "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY CACHE STRING "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY CACHE STRING "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY CACHE STRING "" FORCE)
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM BOTH CACHE STRING "" FORCE)
set(CMAKE_FIND_PACKAGE_PREFER_CONFIG ON CACHE BOOL "" FORCE)

set(ENV{PKG_CONFIG_PATH} ${ACE}/ports/mingw/lib/pkgconfig)
set(CMAKE_PREFIX_PATH ${ACE}/ports/mingw CACHE PATH "")
list(APPEND CMAKE_MODULE_PATH ${ACE}/cmake)

# Program Paths
if(CMAKE_HOST_WIN32)
  file(GLOB ACE_PORTS_TOOLS_PATH
    ${ACE}/ports/mingw/tools
    ${ACE}/ports/mingw/tools/*
    LIST_DIRECTORIES ON)
else()
  file(GLOB ACE_PORTS_TOOLS_PATH
    ${ACE}/ports/linux/tools
    ${ACE}/ports/linux/tools/*
    LIST_DIRECTORIES ON)
endif()

set(ACE_PROGRAM_PATH ${ACE}/bin)
foreach(path ${ACE_PORTS_TOOLS_PATH})
  if(IS_DIRECTORY ${path})
    list(APPEND ACE_PROGRAM_PATH ${path})
  endif()
endforeach()
unset(ACE_PORTS_TOOLS_PATH)

set(CMAKE_SYSTEM_PROGRAM_PATH ${ACE_PROGRAM_PATH} CACHE PATH "")
unset(ACE_SYSTEM_PROGRAM_PATH)

# Compiler
find_program(CMAKE_C_COMPILER clang PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_CXX_COMPILER clang++ PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_CXX_COMPILER_CLANG_SCAN_DEPS clang-scan-deps PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_ASM_COMPILER clang PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_ASM_NASM_COMPILER yasm PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Compiler Targets
set(CMAKE_C_COMPILER_TARGET x86_64-w64-mingw32 CACHE STRING "" FORCE)
set(CMAKE_CXX_COMPILER_TARGET x86_64-w64-mingw32 CACHE STRING "" FORCE)
set(CMAKE_ASM_COMPILER_TARGET x86_64-w64-mingw32 CACHE STRING "" FORCE)
set(CMAKE_ASM_NASM_COMPILER_TARGET x86_64-w64-mingw32 CACHE STRING "" FORCE)

# Compiler Flags
set(CMAKE_C_EXTENSIONS OFF CACHE BOOL "")
set(CMAKE_CXX_EXTENSIONS OFF CACHE BOOL "")

cmake_policy(SET CMP0063 NEW)
set(CMAKE_C_VISIBILITY_PRESET hidden CACHE STRING "")
set(CMAKE_CXX_VISIBILITY_PRESET hidden CACHE STRING "")

cmake_policy(SET CMP0069 NEW)
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION OFF CACHE BOOL "")
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_DEBUG OFF CACHE BOOL "")
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELEASE ON CACHE BOOL "")
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_MINSIZEREL ON CACHE BOOL "")
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_RELWITHDEBINFO OFF CACHE BOOL "")
set(CMAKE_INTERPROCEDURAL_OPTIMIZATION_COVERAGE OFF CACHE BOOL "")

# Visual Studio 2022 Version 17.10 sets _MSC_VER to 1940.
# https://learn.microsoft.com/cpp/overview/compiler-versions?view=msvc-170
# MinGW is already configured to define WINVER=0x0A00 and _WIN32_WINNT=0x0A00.
set(CMAKE_C_FLAGS_INIT "-march=x86-64 -fasm -fms-compatibility-version=19.40")
set(CMAKE_C_FLAGS_DEBUG_INIT "")
set(CMAKE_C_FLAGS_RELEASE_INIT "")
set(CMAKE_C_FLAGS_MINSIZEREL_INIT "")
set(CMAKE_C_FLAGS_RELWITHDEBINFO_INIT "")
set(CMAKE_C_FLAGS_COVERAGE_INIT "-g -fprofile-instr-generate -fcoverage-mapping")

set(CMAKE_CXX_FLAGS_INIT "${CMAKE_C_FLAGS_INIT} -fno-rtti -fexperimental-library")
set(CMAKE_CXX_FLAGS_DEBUG_INIT "${CMAKE_C_FLAGS_DEBUG_INIT}")
set(CMAKE_CXX_FLAGS_RELEASE_INIT "${CMAKE_C_FLAGS_RELEASE_INIT}")
set(CMAKE_CXX_FLAGS_MINSIZEREL_INIT "${CMAKE_C_FLAGS_MINSIZEREL_INIT}")
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO_INIT "${CMAKE_C_FLAGS_RELWITHDEBINFO_INIT}")
set(CMAKE_CXX_FLAGS_COVERAGE_INIT "${CMAKE_C_FLAGS_COVERAGE_INIT}")

# Embed debug information.
cmake_policy(SET CMP0141 NEW)
set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT Embedded CACHE STRING "" FORCE)

# Use release runtime library.
cmake_policy(SET CMP0091 NEW)
set(CMAKE_MSVC_RUNTIME_LIBRARY MultiThreadedDLL CACHE STRING "" FORCE)

# Disable warnings.
cmake_policy(SET CMP0092 NEW)

# Linker
find_program(CMAKE_AR llvm-ar PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_NM llvm-nm PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_LINKER lld PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Linker Flags
cmake_policy(SET CMP0083 NEW)
set(CMAKE_POSITION_INDEPENDENT_CODE ON CACHE BOOL "")

cmake_policy(SET CMP0056 NEW)
foreach(LINKER SHARED MODULE EXE)
  set(CMAKE_${LINKER}_LINKER_FLAGS_INIT "-Xlinker /MANIFEST:NO")
  set(CMAKE_${LINKER}_LINKER_FLAGS_DEBUG_INIT "-Xlinker /DEBUG -Xlinker /INCREMENTAL")
  set(CMAKE_${LINKER}_LINKER_FLAGS_RELEASE_INIT "-s -Xlinker /OPT:REF -Xlinker /OPT:ICF -Xlinker /INCREMENTAL:NO")
  set(CMAKE_${LINKER}_LINKER_FLAGS_MINSIZEREL_INIT "-s -Xlinker /OPT:REF -Xlinker /OPT:ICF -Xlinker /INCREMENTAL:NO")
  set(CMAKE_${LINKER}_LINKER_FLAGS_RELWITHDEBINFO_INIT "-Xlinker /DEBUG -Xlinker /INCREMENTAL")
  set(CMAKE_${LINKER}_LINKER_FLAGS_COVERAGE_INIT "-Xlinker /DEBUG -Xlinker /INCREMENTAL")
endforeach()

# Ninja
if(CMAKE_GENERATOR MATCHES "^Ninja")
  find_program(CMAKE_MAKE_PROGRAM ninja PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
endif()

# Tools
find_program(CMAKE_RANLIB llvm-ranlib PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_OBJCOPY llvm-objcopy PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_OBJDUMP llvm-objdump PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_STRIP llvm-strip PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
find_program(CMAKE_SIZE llvm-size PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Resource Compiler
if(CMAKE_HOST_UNIX)
  find_program(CMAKE_RC_COMPILER windres PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
else()
  find_program(CMAKE_RC_COMPILER llvm-windres PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
  set(CMAKE_RC_FLAGS_INIT "-I ${CMAKE_SYSROOT}/include")
endif()

# DLL Export Table Generator
find_program(CMAKE_DLLTOOL llvm-dlltool PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Manifest Generator
find_program(CMAKE_MT llvm-mt PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)

# Emulator
if(CMAKE_HOST_UNIX)
  find_program(WINE wine PATHS ${CMAKE_SYSTEM_PROGRAM_PATH} REQUIRED)
  set(CMAKE_CROSSCOMPILING_EMULATOR "env;WINEDEBUG=-all;WINEPATH=${ACE}/sys/mingw/bin;${WINE}" CACHE STRING "")
endif()

# Tests
set_property(GLOBAL PROPERTY CTEST_TARGETS_ADDED 1)

# Configurations
set_property(GLOBAL PROPERTY DEBUG_CONFIGURATIONS Debug RelWithDebInfo Coverage)

set(CMAKE_MAP_IMPORTED_CONFIG_DEBUG ";Release" CACHE STRING "")
set(CMAKE_MAP_IMPORTED_CONFIG_MINSIZEREL ";Release" CACHE STRING "")
set(CMAKE_MAP_IMPORTED_CONFIG_RELWITHDEBINFO ";Release" CACHE STRING "")
set(CMAKE_MAP_IMPORTED_CONFIG_COVERAGE ";Release" CACHE STRING "")

# Platform Variables
set(CMAKE_TRY_COMPILE_PLATFORM_VARIABLES
  BUILD_SHARED_LIBS
  CMAKE_TOOLCHAIN_FILE
  CACHE STRING "")

# Ports
macro(_add_library)
  add_library(${ARGV})
endmacro()

if(NOT DEFINED VCPKG_TARGET_TRIPLET)
  set(VCPKG_TARGET_TRIPLET mingw)
  set(VCPKG_INSTALLED_DIR ${ACE}/ports)
  set(_VCPKG_INSTALLED_DIR ${VCPKG_INSTALLED_DIR})
endif()
